const int TRUE_FLAG=1,FALSE_FLAG=0;
const char TRUE_SYM='T',FALSE_SYM='F';
int FIB[31];
char alphabet[57];
char g_char_c;

void TestSwitc()
{
	printf("**********************************************************");
	printf("begin testing switch: there should be 2 Ts ");
	switch(TRUE_FLAG)
	{
		case 1:
			printf(TRUE_SYM);
        default:
        ;
	}
	switch(FALSE_FLAG)
	{
		case 1:
			{
				;
				printf("(0==1) = 1 ",FALSE_SYM);
			}
		case 0:
			printf(TRUE_SYM);
		default:
			;

	}
	switch(TRUE_SYM)
	{
		case 'T':
			{
				printf(TRUE_SYM);
				printf("switch testing finished");

				printf("************************************************************");
				;
				return;
			}
		default:
			{
				printf("should return ",FALSE_SYM);
			}
	}
}
void TestIf()
{
	printf("********************************************************");
	printf("begin testing if: there should be 3 Ts ");
	if(0)
		printf("int value 0 is true ",FALSE_SYM);
	if('a')
		printf(TRUE_SYM);
	if(1)
		printf(TRUE_SYM);
	if(0==0)
		printf(TRUE_SYM);
	if(0!=0)
		printf("false is true ",FALSE_SYM);
	if(1)
		if(1)
			printf(TRUE_SYM);
	if(0)
		if(1)
			printf("true if in false if ",FALSE_SYM);
	if(1)
		if(0)
			printf("false if in true if ",FALSE_SYM);
	if(0)
		if(0)
			printf("false if in false if ",FALSE_SYM);
	if(1)
		{
			printf("1");
			printf("2");
		}
	if(0)
		{
			printf("jump error ");
			printf("jump error ");
		}
	printf(" if testing finished");
	printf("*******************************************************");
}
void TestOp()
{
	printf("********************************************************");
	printf("begin testing ops ");
	if (1<2)
		if (1<=2)
			if (2<=2)
				if (3>2)
					if (3>=2)
						if (2>=2)
							if (2==2)
								if (4!=2)
									printf("RelaOp ",TRUE_SYM);
	if(2<1)
		printf("less1 ",FALSE_SYM);
	if(1<1)
		printf("less2 ",FALSE_SYM);
	if(2<=1)
		printf("leq ",FALSE_SYM);
	if(2>3)
		printf("greater1 ",FALSE_SYM);
	if(2>2)
		printf("greater2 ",FALSE_SYM);
	if(2>=3)
		printf("geq ",FALSE_SYM);
	if(3==2)
		printf("equal ",FALSE_SYM);
	if(2!=2)
		printf("neq ",FALSE_SYM);
	if(TRUE_SYM!='T')
		printf("char in condition",FALSE_SYM);
	if (1+1==2)
		if (1-1==0)
			if (1*1==1)
				if (4/2==2)
					if (5/2==2)
						if(0-(1+2*3/4)==-2)
						{
							printf(" ArithOp ",TRUE_SYM);
							{ }
							{ ;}
							printf("op testing finished");
							printf("*************************************************");
							return;
						}
	printf("ArithOp ",FALSE_SYM);
	printf("***********************************************");
}
void initAlph()
{
	alphabet[0]='a';
	alphabet[1]='b';
	alphabet[2]='c';
	alphabet[3]='A';
	alphabet[4]='B';
	alphabet[5]='C';
	alphabet[6]='_';
}
void TestGloba(int a, int b)
{
	if(a>b)
		return;
	g_char_c = alphabet[a];
	if(g_char_c == '_')
		return;
	printf(g_char_c);
	TestGloba(a+1,b);
}
int Fib(int n)
{
	if (n <= 1)
		return (1);
	return (Fib(n-2)+Fib(n-1));
}
void RecordFib(int n)
{
	int i;
	FIB[0] = 1;
	FIB[1] = 1;
	i = 2;
	while (i <= n)
	{
		FIB[i] = FIB[i-1] + FIB[i-2];
		i = i + 1;
	{	}
	}
	i = n+1;
}
void error(int err)
{
	switch (err)
	{
		case 1:
			printf("input number should be bigger than 0");
		case 2:
			printf("input number should be less than 21");
		default:
			printf("unknown error");
	}
}
void main()
{
	const int NMAX=20;
	int n,err;
	char c;
	TestOp();
	TestSwitc();
	initAlph();
	TestGloba(0,6);
	printf("please input a number between 0(not included) and 20 and a character:");
	scanf(n,c);
	printf(" ");
	err = 0;
	if (n <= 0)
		err = 1;
	if (n > NMAX)
		err = 2;
	if (err)
	{
		error(err);
		return;
	}
	RecordFib(n);
	if (Fib(n)!=FIB[n])
		printf("something wrong in Fib");
	if (--1++1*-1-Fib(1)*n/n+ FIB[('z'-'a')/12-1]-'z'+'a'+25)
		printf("something wrong in expression dealing");
	printf("the no.",n);
	printf(" Fibnonacci is ",FIB[n]);
	return;
}
