CONSTSY   const
INTSY     int
ident     a1
eqlsy     =
ints      0
comma     ,
ident     b1
eqlsy     =
ints      1
comma     ,
ident     c1
eqlsy     =
ints      10
semicolon ;
CONSTSY   const
CHARSY    char
ident     A1
eqlsy     =
charcon   a
comma     ,
ident     B1
eqlsy     =
charcon   A
comma     ,
ident     C1
eqlsy     =
charcon   +
comma     ,
ident     D1
eqlsy     =
charcon   -
comma     ,
ident     E1
eqlsy     =
charcon   *
comma     ,
ident     F1
eqlsy     =
charcon   /
comma     ,
ident     G1
eqlsy     =
charcon   _
comma     ,
ident     H1
eqlsy     =
charcon   1
semicolon ;
CONSTSY   const
INTSY     int
ident     d1
eqlsy     =
minuss    -
ints      0
comma     ,
ident     e1
eqlsy     =
pluss     +
ints      0
comma     ,
ident     f1
eqlsy     =
pluss     +
ints      5
comma     ,
ident     g1
eqlsy     =
minuss    -
ints      10
semicolon ;
INTSY     int
ident     Fibonaq
lbrack    [
ints      10
rbrack    ]
semicolon ;
INTSY     int
ident     count
semicolon ;
CHARSY    char
ident     _a__A_
semicolon ;
INTSY     int
ident     add
lparent   (
INTSY     int
ident     a
comma     ,
INTSY     int
ident     k
rparent   )
lbrace    {
RETURNSY  return
lparent   (
ident     a
pluss     +
ident     k
rparent   )
semicolon ;
rbrace    }
INTSY     int
ident     ret1
lparent   (
INTSY     int
ident     swi
rparent   )
lbrace    {
IFSY      if
lparent   (
ident     swi
eql       ==
ints      1
rparent   )
RETURNSY  return
lparent   (
ints      1
rparent   )
semicolon ;
IFSY      if
lparent   (
ident     swi
eql       ==
ints      0
rparent   )
RETURNSY  return
lparent   (
charcon   a
rparent   )
semicolon ;
rbrace    }
VOIDSY    void
ident     fun_void
lparent   (
rparent   )
lbrace    {
CONSTSY   const
INTSY     int
ident     a
eqlsy     =
ints      10
semicolon ;
INTSY     int
ident     b
semicolon ;
CHARSY    char
ident     sc
semicolon ;
rbrace    }
INTSY     int
ident     funct_add
lparent   (
INTSY     int
ident     a
comma     ,
INTSY     int
ident     k
rparent   )
lbrace    {
INTSY     int
ident     c
eqlsy     =
ident     a
times     *
ident     k
semicolon ;
CHARSY    char
ident     fun_cc
lbrack    [
ints      2
rbrack    ]
semicolon ;
ident     fun_cc
lbrack    [
ints      0
rbrack    ]
eqlsy     =
charcon   Z
semicolon ;
ident     fun_cc
lbrack    [
ints      1
rbrack    ]
eqlsy     =
charcon   0
semicolon ;
RETURNSY  return
lparent   (
ident     c
pluss     +
ident     add
lparent   (
ident     a
comma     ,
ident     k
rparent   )
pluss     +
ident     fun_cc
lbrack    [
ints      1
rbrack    ]
pluss     +
ident     fun_cc
lbrack    [
ints      0
rbrack    ]
rparent   )
semicolon ;
rbrace    }
CHARSY    char
ident     trans_case
lparent   (
CHARSY    char
ident     s
rparent   )
lbrace    {
IFSY      if
lparent   (
ident     s
geq       >=
charcon   A
rparent   )
lbrace    {
IFSY      if
lparent   (
ident     s
leq       <=
charcon   Z
rparent   )
RETURNSY  return
lparent   (
ident     s
pluss     +
charcon   a
minuss    -
charcon   A
rparent   )
semicolon ;
rbrace    }
IFSY      if
lparent   (
ident     s
geq       >=
charcon   a
rparent   )
lbrace    {
IFSY      if
lparent   (
ident     s
leq       <=
charcon   z
rparent   )
RETURNSY  return
lparent   (
ident     s
minuss    -
lparent   (
charcon   a
minuss    -
charcon   A
rparent   )
rparent   )
semicolon ;
rbrace    }
rbrace    }
VOIDSY    void
ident     count_1
lparent   (
rparent   )
lbrace    {
ident     count
eqlsy     =
ident     count
pluss     +
ints      1
semicolon ;
RETURNSY  return
semicolon ;
rbrace    }
VOIDSY    void
ident     FibonA
lparent   (
INTSY     int
ident     k
rparent   )
lbrace    {
IFSY      if
lparent   (
ident     k
eql       ==
ints      10
rparent   )
RETURNSY  return
semicolon ;
ident     Fibonaq
lbrack    [
ident     k
rbrack    ]
eqlsy     =
ident     Fibonaq
lbrack    [
ident     k
minuss    -
ints      1
rbrack    ]
pluss     +
ident     Fibonaq
lbrack    [
ident     k
minuss    -
ints      2
rbrack    ]
semicolon ;
ident     FibonA
lparent   (
ident     k
pluss     +
ints      1
rparent   )
semicolon ;
RETURNSY  return
semicolon ;
rbrace    }
VOIDSY    void
MAINSY    main
lparent   (
rparent   )
lbrace    {
CONSTSY   const
INTSY     int
ident     a_num
eqlsy     =
ints      10
comma     ,
ident     b_num
eqlsy     =
ints      20
semicolon ;
INTSY     int
ident     a_array
lbrack    [
ints      5
rbrack    ]
comma     ,
ident     k
semicolon ;
CHARSY    char
ident     C_array
lbrack    [
ints      5
rbrack    ]
semicolon ;
INTSY     int
ident     m
comma     ,
ident     swisym
semicolon ;
CHARSY    char
ident     n
semicolon ;
INTSY     int
ident     Fibo_count
semicolon ;
INTSY     int
ident     sc
comma     ,
ident     a
comma     ,
ident     b
semicolon ;
CHARSY    char
ident     sss
semicolon ;
ident     sss
eqlsy     =
charcon   S
semicolon ;
ident     k
eqlsy     =
ints      0
semicolon ;
semicolon ;
semicolon ;
ident     count_1
lparent   (
rparent   )
semicolon ;
WHILESY   while
lparent   (
ident     k
less      <
ints      5
rparent   )
lbrace    {
SCANFSY   scanf
lparent   (
ident     m
comma     ,
ident     n
rparent   )
semicolon ;
ident     a_array
lbrack    [
ident     k
rbrack    ]
eqlsy     =
ident     m
semicolon ;
ident     C_array
lbrack    [
ident     k
rbrack    ]
eqlsy     =
ident     n
semicolon ;
ident     k
eqlsy     =
ident     k
pluss     +
ints      1
semicolon ;
rbrace    }
SCANFSY   scanf
lparent   (
ident     _a__A_
rparent   )
semicolon ;
SCANFSY   scanf
lparent   (
ident     sc
rparent   )
semicolon ;
SCANFSY   scanf
lparent   (
ident     a
comma     ,
ident     b
rparent   )
semicolon ;
ident     count_1
lparent   (
rparent   )
semicolon ;
ident     Fibo_count
eqlsy     =
ints      2
semicolon ;
ident     Fibonaq
lbrack    [
ints      0
rbrack    ]
eqlsy     =
ints      0
semicolon ;
ident     Fibonaq
lbrack    [
ints      1
rbrack    ]
eqlsy     =
ints      1
semicolon ;
ident     FibonA
lparent   (
ident     Fibo_count
rparent   )
semicolon ;
ident     k
eqlsy     =
ints      0
semicolon ;
WHILESY   while
lparent   (
ident     k
less      <
ints      10
rparent   )
lbrace    {
PRINTSY   printf
lparent   (
stringcon FIBONAQ:
comma     ,
ident     Fibonaq
lbrack    [
ident     k
rbrack    ]
rparent   )
semicolon ;
ident     k
eqlsy     =
ident     k
pluss     +
ints      1
semicolon ;
rbrace    }
ident     count_1
lparent   (
rparent   )
semicolon ;
ident     fun_void
lparent   (
rparent   )
semicolon ;
ident     count_1
lparent   (
rparent   )
semicolon ;
SWITCHSY  switch
lparent   (
ident     _a__A_
rparent   )
lbrace    {
CASESY    case
charcon   a
colon     :
IFSY      if
lparent   (
ident     sc
rparent   )
PRINTSY   printf
lparent   (
stringcon _a__A_ is the first:
comma     ,
ident     _a__A_
rparent   )
semicolon ;
CASESY    case
charcon   b
colon     :
IFSY      if
lparent   (
ident     sc
rparent   )
PRINTSY   printf
lparent   (
stringcon _a__A_ is the second:
comma     ,
ident     _a__A_
rparent   )
semicolon ;
CASESY    case
charcon   c
colon     :
IFSY      if
lparent   (
ident     sc
rparent   )
lbrace    {
PRINTSY   printf
lparent   (
stringcon _a__A_ is the third:
comma     ,
ident     _a__A_
rparent   )
semicolon ;
rbrace    }
ident     default
colon     :
PRINTSY   printf
lparent   (
stringcon default:_a__A_ is not in swich words:
comma     ,
ident     _a__A_
rparent   )
semicolon ;
rbrace    }
ident     count_1
lparent   (
rparent   )
semicolon ;
IFSY      if
lparent   (
ident     a
geq       >=
ident     b
rparent   )
PRINTSY   printf
lparent   (
stringcon a >= b
rparent   )
semicolon ;
IFSY      if
lparent   (
ident     a
pluss     +
ints      1
leq       <=
ints      2
times     *
ident     b
rparent   )
PRINTSY   printf
lparent   (
stringcon a+1 <= 2b
rparent   )
semicolon ;
IFSY      if
lparent   (
ident     a
eql       ==
ints      10
rparent   )
PRINTSY   printf
lparent   (
stringcon a is 10;
rparent   )
semicolon ;
IFSY      if
lparent   (
ident     a
uneql     !=
ident     b
rparent   )
PRINTSY   printf
lparent   (
stringcon a != b
rparent   )
semicolon ;
IFSY      if
lparent   (
ident     a
less      <
ints      2
times     *
ident     b
rparent   )
PRINTSY   printf
lparent   (
stringcon a < 2*b
rparent   )
semicolon ;
IFSY      if
lparent   (
ident     a
gree      >
ident     b
rparent   )
PRINTSY   printf
lparent   (
stringcon a > b
rparent   )
semicolon ;
IFSY      if
lparent   (
ident     a
pluss     +
ident     b
rparent   )
PRINTSY   printf
lparent   (
stringcon a+b is not 0
rparent   )
semicolon ;
ident     count_1
lparent   (
rparent   )
semicolon ;
PRINTSY   printf
lparent   (
ident     add
lparent   (
ident     a
pluss     +
ints      100
comma     ,
ident     b
times     *
ints      2
rparent   )
rparent   )
semicolon ;
ident     count_1
lparent   (
rparent   )
semicolon ;
PRINTSY   printf
lparent   (
stringcon funct_add:
comma     ,
ident     funct_add
lparent   (
ident     a
comma     ,
ident     b
rparent   )
rparent   )
semicolon ;
ident     count_1
lparent   (
rparent   )
semicolon ;
PRINTSY   printf
lparent   (
ident     A1
pluss     +
ident     B1
pluss     +
ident     C1
pluss     +
ident     D1
pluss     +
ident     E1
pluss     +
ident     F1
pluss     +
ident     G1
pluss     +
ident     H1
rparent   )
semicolon ;
ident     count_1
lparent   (
rparent   )
semicolon ;
PRINTSY   printf
lparent   (
stringcon a+b+A1-B1:
comma     ,
ident     a
pluss     +
ident     b
pluss     +
ident     A1
minuss    -
ident     B1
rparent   )
semicolon ;
PRINTSY   printf
lparent   (
ident     a1
pluss     +
ident     d1
pluss     +
ident     e1
rparent   )
semicolon ;
PRINTSY   printf
lparent   (
ident     f1
pluss     +
ident     g1
rparent   )
semicolon ;
PRINTSY   printf
lparent   (
stringcon -(a+b)+A1-B1+a*b/2-add(k,1)*2+a_array[1]*2/3+'a'-10:
comma     ,
minuss    -
lparent   (
ident     a
pluss     +
ident     b
rparent   )
pluss     +
ident     A1
minuss    -
ident     B1
pluss     +
ident     a
times     *
ident     b
idiv      /
ints      2
minuss    -
ident     add
lparent   (
ident     k
comma     ,
ints      1
rparent   )
times     *
ints      2
pluss     +
ident     a_array
lbrack    [
ints      1
rbrack    ]
times     *
ints      2
idiv      /
ints      3
times     *
ident     a_array
lbrack    [
ints      0
rbrack    ]
pluss     +
charcon   a
minuss    -
ints      10
rparent   )
semicolon ;
ident     count_1
lparent   (
rparent   )
semicolon ;
PRINTSY   printf
lparent   (
stringcon   !#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUV  WXYZ[\]^`abcdefghijklmnopqrstuvwxyz{|}~ 
rparent   )
semicolon ;
lbrace    {
semicolon ;
semicolon ;
rbrace    }
semicolon ;
semicolon ;
lbrace    {
ident     count_1
lparent   (
rparent   )
semicolon ;
PRINTSY   printf
lparent   (
ints      1
rparent   )
semicolon ;
PRINTSY   printf
lparent   (
charcon   a
rparent   )
semicolon ;
PRINTSY   printf
lparent   (
stringcon Helloworld!
rparent   )
semicolon ;
PRINTSY   printf
lparent   (
stringcon count_1:
comma     ,
ident     count
rparent   )
semicolon ;
PRINTSY   printf
lparent   (
stringcon print1:
comma     ,
ident     add
lparent   (
ident     a_array
lbrack    [
ints      0
rbrack    ]
comma     ,
ident     a_array
lbrack    [
ints      1
rbrack    ]
pluss     +
ints      1
rparent   )
rparent   )
semicolon ;
PRINTSY   printf
lparent   (
ident     C_array
lbrack    [
ints      0
rbrack    ]
rparent   )
semicolon ;
PRINTSY   printf
lparent   (
ident     trans_case
lparent   (
ident     C_array
lbrack    [
ints      0
rbrack    ]
rparent   )
times     *
ints      10
idiv      /
ints      2
rparent   )
semicolon ;
rbrace    }
ident     k
eqlsy     =
ints      5
semicolon ;
WHILESY   while
lparent   (
ints      2
times     *
ident     k
minuss    -
ident     k
rparent   )
lbrace    {
PRINTSY   printf
lparent   (
ident     trans_case
lparent   (
ident     C_array
lbrack    [
ident     k
minuss    -
ints      1
rbrack    ]
rparent   )
rparent   )
semicolon ;
ident     k
eqlsy     =
ident     k
minuss    -
ints      1
semicolon ;
rbrace    }
RETURNSY  return
semicolon ;
rbrace    }
