CONSTSY   const
INTSY     int
ident     _in1
eqlsy     =
ints      1
comma     ,
ident     _in2
eqlsy     =
ints      0
semicolon ;
CONSTSY   const
CHARSY    char
ident     _sn1
eqlsy     =
charcon   _
comma     ,
ident     _sn2
eqlsy     =
charcon   a
comma     ,
ident     _sn3
eqlsy     =
charcon   A
semicolon ;
CONSTSY   const
INTSY     int
ident     _in3
eqlsy     =
pluss     +
ints      0
comma     ,
ident     _in4
eqlsy     =
minuss    -
ints      0
comma     ,
ident     _in4
eqlsy     =
minuss    -
ints      10
comma     ,
ident     _in5
eqlsy     =
pluss     +
ints      10
semicolon ;
INTSY     int
ident     a
comma     ,
ident     b
comma     ,
ident     c
lbrack    [
ints      5
rbrack    ]
semicolon ;
CHARSY    char
ident     ss
lbrack    [
ints      5
rbrack    ]
semicolon ;
INTSY     int
ident     d
semicolon ;
INTSY     int
ident     add
lparent   (
INTSY     int
ident     e
comma     ,
INTSY     int
ident     f
rparent   )
lbrace    {
RETURNSY  return
lparent   (
ident     e
pluss     +
ident     f
rparent   )
semicolon ;
rbrace    }
VOIDSY    void
ident     ff
lparent   (
rparent   )
lbrace    {
INTSY     int
ident     i
semicolon ;
ident     i
eqlsy     =
ints      0
semicolon ;
WHILESY   while
lparent   (
ident     i
less      <
ints      5
rparent   )
lbrace    {
ident     c
lbrack    [
ident     i
rbrack    ]
eqlsy     =
ident     i
pluss     +
ints      1
semicolon ;
rbrace    }
rbrace    }
VOIDSY    void
MAINSY    main
lparent   (
rparent   )
lbrace    {
CONSTSY   const
INTSY     int
ident     wsw1
eqlsy     =
ints      10
semicolon ;
CONSTSY   const
CHARSY    char
ident     wsw2
eqlsy     =
charcon   +
comma     ,
ident     wsw3
eqlsy     =
charcon   -
semicolon ;
CONSTSY   const
CHARSY    char
ident     wsw4
eqlsy     =
charcon   *
comma     ,
ident     wsw5
eqlsy     =
charcon   /
semicolon ;
INTSY     int
ident     k
semicolon ;
CHARSY    char
ident     s
lbrack    [
ints      2
rbrack    ]
semicolon ;
SCANFSY   scanf
lparent   (
ident     k
rparent   )
semicolon ;
SWITCHSY  switch
lparent   (
ident     k
rparent   )
lbrace    {
CASESY    case
ints      1
colon     :
PRINTSY   printf
lparent   (
ints      1
rparent   )
semicolon ;
CASESY    case
ints      2
colon     :
PRINTSY   printf
lparent   (
charcon   a
rparent   )
semicolon ;
CASESY    case
ints      3
colon     :
PRINTSY   printf
lparent   (
stringcon  Hello world! 
rparent   )
semicolon ;
CASESY    case
ints      4
colon     :
PRINTSY   printf
lparent   (
stringcon Hello:
comma     ,
ident     k
pluss     +
ints      1
times     *
ints      2
rparent   )
semicolon ;
CASESY    case
ints      5
colon     :
PRINTSY   printf
lparent   (
ident     k
pluss     +
ints      1
times     *
ints      2
rparent   )
semicolon ;
ident     default
colon     :
PRINTSY   printf
lparent   (
stringcon Error!
rparent   )
semicolon ;
rbrace    }
IFSY      if
lparent   (
ident     k
geq       >=
ints      6
rparent   )
PRINTSY   printf
lparent   (
stringcon k is:
comma     ,
ident     k
times     *
ints      2
rparent   )
semicolon ;
RETURNSY  return
semicolon ;
rbrace    }
